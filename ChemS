import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(const ChemistryApp());
}

class ChemistryApp extends StatelessWidget {
  const ChemistryApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ChemS',
      theme: ThemeData(
        primaryColor: Colors.blue,
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        scaffoldBackgroundColor: const Color(0xFFF9F9F9),
        useMaterial3: true,
      ),
      home: const ChemistryHomePage(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class ChemistryHomePage extends StatefulWidget {
  const ChemistryHomePage({super.key});

  @override
  State<ChemistryHomePage> createState() => _ChemistryHomePageState();
}

class _ChemistryHomePageState extends State<ChemistryHomePage> {
  final TextEditingController _controller = TextEditingController();
  Map<String, dynamic>? _chemicalData;
  bool _isLoading = false;

  Future<void> _searchChemical() async {
    final query = _controller.text.trim();
    if (query.isEmpty) return;

    setState(() {
      _isLoading = true;
      _chemicalData = null;
    });

    try {
      final cidUrl = Uri.parse(
        'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/$query/cids/JSON',
      );
      final cidResponse = await http.get(cidUrl);

      if (cidResponse.statusCode == 200) {
        final cidData = json.decode(cidResponse.body);
        final cids = cidData['IdentifierList']?['CID'];

        if (cids != null && cids.isNotEmpty) {
          final cid = cids[0];

          final propUrl = Uri.parse(
            'https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/$cid/property/Title,MolecularFormula,MolecularWeight/JSON',
          );
          final propResponse = await http.get(propUrl);

          if (propResponse.statusCode == 200) {
            final propData = json.decode(propResponse.body);
            final props = propData['PropertyTable']['Properties'][0];

            // Get extra properties from PUG View
            final viewUrl = Uri.parse(
              'https://pubchem.ncbi.nlm.nih.gov/rest/pug_view/data/compound/$cid/JSON',
            );
            final viewResponse = await http.get(viewUrl);

            if (viewResponse.statusCode == 200) {
              final viewData = json.decode(viewResponse.body);
              final sections = viewData['Record']['Section'] as List<dynamic>;

              String? extractValue(List<dynamic> sections, String heading) {
                for (final section in sections) {
                  if (section['TOCHeading'] == 'Experimental Properties') {
                    for (final sub in section['Section'] ?? []) {
                      if (sub['TOCHeading'] == heading) {
                        final info = sub['Information']?[0]?['Value'];
                        if (info == null) return null;

                        if (info['StringWithMarkup'] != null) {
                          return info['StringWithMarkup'][0]['String'];
                        }
                        if (info['Number'] != null) {
                          return info['Number'][0].toString();
                        }
                      }
                    }
                  } else if (section['Section'] != null) {
                    final result = extractValue(section['Section'], heading);
                    if (result != null) return result;
                  }
                }
                return null;
              }

              props['MeltingPoint'] = extractValue(sections, 'Melting Point');
              props['BoilingPoint'] = extractValue(sections, 'Boiling Point');
              props['Density'] = extractValue(sections, 'Density');
            }

            setState(() {
              _chemicalData = props;
              _isLoading = false;
            });
            return;
          }
        }
      }
    } catch (e) {
      print('ÏóêÎü¨ Î∞úÏÉù: $e');
    }

    setState(() {
      _chemicalData = null;
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ChemS', style: TextStyle(fontWeight: FontWeight.bold)),
        centerTitle: true,
        backgroundColor: Colors.blue,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                prefixIcon: const Icon(Icons.search),
                labelText: 'ÌôîÌïôÏãù ÎòêÎäî Ïù¥Î¶Ñ ÏûÖÎ†• (Ïòà: H2O, glucose)',
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
                filled: true,
                fillColor: Colors.white,
              ),
            ),
            const SizedBox(height: 16),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton.icon(
                onPressed: _searchChemical,
                icon: const Icon(Icons.science),
                label: const Text('Í≤ÄÏÉâ', style: TextStyle(fontSize: 18)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                ),
              ),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: _isLoading
                  ? const Center(child: CircularProgressIndicator())
                  : _chemicalData == null
                  ? const Center(child: Text('Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.', style: TextStyle(fontSize: 18)))
                  : ChemicalInfoCard(data: _chemicalData!),
            ),
          ],
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const [
          BottomNavigationBarItem(
            icon: Icon(Icons.camera_alt),
            label: 'Ï¥¨ÏòÅ',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.search),
            label: 'Í≤ÄÏÉâ',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Ìôà',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.favorite),
            label: 'Ï¶êÍ≤®Ï∞æÍ∏∞',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'ÏÑ§Ï†ï',
          ),
        ],
        currentIndex: 1, // Set to index of current page, 1 for search
        onTap: (index) {
          // Add your navigation logic here if needed
        },
      ),
    );
  }
}

class ChemicalInfoCard extends StatelessWidget {
  final Map<String, dynamic> data;

  const ChemicalInfoCard({super.key, required this.data});

  @override
  Widget build(BuildContext context) {
    return Card(
      color: Colors.teal.shade50,
      elevation: 6,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ListView(
          children: [
            _infoRow('üß™ Ïù¥Î¶Ñ', data['Title']),
            _infoRow('‚öóÔ∏è Î∂ÑÏûêÏãù', _formatFormula(data['MolecularFormula'])),
            _infoRow('‚öñÔ∏è Î∂ÑÏûêÎüâ', '${data['MolecularWeight']} g/mol'),
            _infoRow('‚ùÑÔ∏è ÎÖπÎäîÏ†ê', data['MeltingPoint'] != null ? '${data['MeltingPoint']} ‚ÑÉ' : 'Ï†ïÎ≥¥ ÏóÜÏùå'),
            _infoRow('üî• ÎÅìÎäîÏ†ê', data['BoilingPoint'] != null ? '${data['BoilingPoint']} ‚ÑÉ' : 'Ï†ïÎ≥¥ ÏóÜÏùå'),
            _infoRow('üßä Î∞ÄÎèÑ', data['Density'] != null ? '${data['Density']} g/cm¬≥' : 'Ï†ïÎ≥¥ ÏóÜÏùå'),
          ],
        ),
      ),
    );
  }

  Widget _infoRow(String label, String? value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 6),
      child: Row(
        children: [
          SizedBox(width: 100, child: Text(label, style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16))),
          Expanded(child: Text(value ?? 'Ï†ïÎ≥¥ ÏóÜÏùå', style: const TextStyle(fontSize: 16))),
        ],
      ),
    );
  }

  String _formatFormula(String? formula) {
    if (formula == null) return 'Ï†ïÎ≥¥ ÏóÜÏùå';
    const subscript = {
      '0': '‚ÇÄ', '1': '‚ÇÅ', '2': '‚ÇÇ', '3': '‚ÇÉ', '4': '‚ÇÑ',
      '5': '‚ÇÖ', '6': '‚ÇÜ', '7': '‚Çá', '8': '‚Çà', '9': '‚Çâ',
    };
    return formula.replaceAllMapped(RegExp(r'\d'), (match) => subscript[match.group(0)] ?? match.group(0)!);
  }
}
